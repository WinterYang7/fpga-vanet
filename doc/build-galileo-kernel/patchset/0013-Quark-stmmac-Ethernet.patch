From d46d2fcef1ebbe89349d8c94e05130e2baa5b8ea Mon Sep 17 00:00:00 2001
From: Eugene Bolshakov <pub@relvarsoft.com>
Date: Sun, 6 Dec 2015 10:36:12 +0300
Subject: [PATCH 13/16] Quark: stmmac Ethernet

Linux Kernel 3.19 patch for Intel Galileo Gen1/Gen2 board
Source code is available on https://github.com/xbolshe/galileo-sources

Signed-off-by: Eugene Bolshakov <pub@relvarsoft.com>

Original source: 0017-Quark-stmmac-Ethernet-quark.patch
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c |  151 ++++++++++++++++++++--
 drivers/net/phy/phy_device.c                     |    4 +
 2 files changed, 147 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 054520d..611ec60 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -23,14 +23,124 @@
   Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
 *******************************************************************************/
 
+#include <linux/dmi.h>
 #include <linux/pci.h>
 #include "stmmac.h"
 
-static void stmmac_default_data(struct plat_stmmacenet_data *plat)
+#define STMMAC_VENDOR_ID 0x700
+#define STMMAC_DEVICE_ID 0x1108
+#define STMMAC_QUARK_ID 0x0937
+
+#if defined(CONFIG_INTEL_QUARK_X1000_SOC)
+static int enable_msi = 1;
+#else
+static int enable_msi; /* by default initialized to 0 */
+#endif
+module_param(enable_msi, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable_msi, "Enable PCI MSI mode");
+static int bus_id = 1;
+
+struct stmmac_qrk_mac_data {
+	int phy_addr;
+	int bus_id;
+	const char *name;
+};
+
+static struct stmmac_qrk_mac_data phy_data[] = {
 {
-	plat->bus_id = 1;
-	plat->phy_addr = 0;
-	plat->interface = PHY_INTERFACE_MODE_GMII;
+		.phy_addr	= -1,			/* not connected */
+		.bus_id		= 1,
+		.name		= "QuarkEmulation",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 2,
+		.name		= "QuarkEmulation",
+	},
+	{
+		.phy_addr	= 3,
+		.bus_id		= 1,
+		.name		= "ClantonPeakSVP",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 2,
+		.name		= "ClantonPeakSVP",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 1,
+		.name		= "KipsBay",
+	},
+	{
+		.phy_addr	= -1,			/* not connected */
+		.bus_id		= 2,
+		.name 		= "KipsBay",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 1,
+		.name		= "CrossHill",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 2,
+		.name		= "CrossHill",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 1,
+		.name		= "ClantonHill",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 2,
+		.name		= "ClantonHill",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 1,
+		.name		= "Galileo",
+	},
+	{
+		.phy_addr	= -1,			/* not connected */
+		.bus_id		= 2,
+		.name		= "Galileo",
+	},
+	{
+		.phy_addr	= 1,
+		.bus_id		= 1,
+		.name		= "GalileoGen2",
+	},
+	{
+		.phy_addr	= -1,			/* not connected */
+		.bus_id		= 2,
+		.name		= "GalileoGen2",
+	},
+};
+
+static int stmmac_find_phy_addr(int mdio_bus_id)
+{
+	int i = 0;
+	const char * board_name = dmi_get_system_info(DMI_BOARD_NAME);
+	if (board_name == NULL)
+		return -1;
+
+	for (; i < sizeof(phy_data)/sizeof(struct stmmac_qrk_mac_data); i++){
+		if ((!strcmp(phy_data[i].name, board_name)) &&
+			phy_data[i].bus_id == mdio_bus_id)
+			return phy_data[i].phy_addr;
+	}
+
+	return -1;
+}
+
+static void stmmac_default_data(struct plat_stmmacenet_data *plat, int mdio_bus_id, const struct pci_device_id *id)
+{
+	int phy_addr;
+
+	plat->bus_id = mdio_bus_id;
+
 	plat->clk_csr = 2;	/* clk_csr_i = 20-35MHz & MDC = clk_csr_i/16 */
 	plat->has_gmac = 1;
 	plat->force_sf_dma_mode = 1;
@@ -38,8 +148,20 @@ static void stmmac_default_data(struct plat_stmmacenet_data *plat)
 	plat->mdio_bus_data->phy_reset = NULL;
 	plat->mdio_bus_data->phy_mask = 0;
 
+	phy_addr = stmmac_find_phy_addr(mdio_bus_id);		// phy_addr == -1 will be checked out of stmmac_default_data
+
+	if (id->device ==  STMMAC_QUARK_ID) {
+		plat->phy_addr = phy_addr;
+		plat->interface = PHY_INTERFACE_MODE_RMII;
+		plat->dma_cfg->pbl = 16;
+		plat->dma_cfg->fixed_burst = 1;
+		plat->dma_cfg->burst_len = DMA_AXI_BLEN_256;
+	} else {
+		plat->phy_addr = 0;
+		plat->interface = PHY_INTERFACE_MODE_GMII;
 	plat->dma_cfg->pbl = 32;
 	plat->dma_cfg->burst_len = DMA_AXI_BLEN_256;
+	}
 
 	/* Set default value for multicast hash bins */
 	plat->multicast_filter_bins = HASH_TABLE_SIZE;
@@ -83,6 +205,10 @@ static int stmmac_pci_probe(struct pci_dev *pdev,
 	if (!plat->dma_cfg)
 		return -ENOMEM;
 
+	stmmac_default_data(plat,bus_id,id);
+	if(plat->phy_addr == -1)		// if not connected device
+		return -ENXIO;
+
 	/* Enable pci device */
 	ret = pcim_enable_device(pdev);
 	if (ret) {
@@ -103,7 +229,13 @@ static int stmmac_pci_probe(struct pci_dev *pdev,
 
 	pci_set_master(pdev);
 
-	stmmac_default_data(plat);
+	if (enable_msi == 1) {
+		ret = pci_enable_msi(pdev);
+		if(ret)
+			pr_info("stmmaceth MSI mode IS NOT enabled\n");
+		else
+			pr_info("stmmaceth MSI mode IS enabled\n");
+	}
 
 	priv = stmmac_dvr_probe(&pdev->dev, plat, pcim_iomap_table(pdev)[i]);
 	if (IS_ERR(priv)) {
@@ -113,9 +245,14 @@ static int stmmac_pci_probe(struct pci_dev *pdev,
 	priv->dev->irq = pdev->irq;
 	priv->wol_irq = pdev->irq;
 
+	#ifdef CONFIG_INTEL_QUARK_X1000_SOC
+	priv->lpi_irq = -ENXIO;
+	#endif
+
 	pci_set_drvdata(pdev, priv->dev);
 
 	dev_dbg(&pdev->dev, "STMMAC PCI driver registration completed\n");
+	bus_id++;
 
 	return 0;
 }
@@ -154,10 +291,8 @@ static int stmmac_pci_resume(struct device *dev)
 
 static SIMPLE_DEV_PM_OPS(stmmac_pm_ops, stmmac_pci_suspend, stmmac_pci_resume);
 
-#define STMMAC_VENDOR_ID 0x700
-#define STMMAC_DEVICE_ID 0x1108
-
 static const struct pci_device_id stmmac_id_table[] = {
+	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, STMMAC_QUARK_ID)},
 	{PCI_DEVICE(STMMAC_VENDOR_ID, STMMAC_DEVICE_ID)},
 	{PCI_DEVICE(PCI_VENDOR_ID_STMICRO, PCI_DEVICE_ID_STMICRO_MAC)},
 	{}
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 3fc91e8..4ad19b0 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -679,6 +679,10 @@ void phy_detach(struct phy_device *phydev)
 
 	phydev->attached_dev->phydev = NULL;
 	phydev->attached_dev = NULL;
+
+	if(!phydev->drv)
+		return;
+
 	phy_suspend(phydev);
 
 	/* If the device had no specific driver before (i.e. - it
-- 
1.7.9.5


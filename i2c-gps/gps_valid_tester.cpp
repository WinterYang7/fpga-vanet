#include "i2c-gps.h"
#include "Ublox.h"

#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

unsigned char gps_config_change[] = {

		/* CFG_GNSS: GPS & GLONASS with SBAS */
		0xB5, 0x62, 0x06, 0x3E, 0x34, 0x00, 0x00, 0x00, 0x20,
		0x06, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01,
		0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x03,
		0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x05, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00,
		0x01, 0x00, 0x01, 0x01, 0x15, 0xED,

		/* CFG_SBAS: MSAS */
		0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x01, 0x03, 0x03,
		0x00, 0x00, 0x02, 0x02, 0x00, 0x2F, 0xC3,

		/*timepulse*/
		/* 5Hz, 50% */
		0xB5, 0x62, 0x06, 0x31, 0x20,0x00,0x00,0x01,0x00,0x00,
		0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x01,0x00,
		0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xAB,0x00,0x00,0x00,0x89,0xA2

};

#define SIZE_PER_PLATFORM 44
unsigned char gps_platform_model_data[] = {
		/* CFG_NAV5: Platform model: 2-Stationary */
		0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x02,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
		0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E,
		0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0xD2,

		/* CFG_NAV5: Platform model: 3-Pedestrian */
		0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x03,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
		0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E,
		0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0xF4,

		/* CFG_NAV5: Platform model: 4-Automotive */
		0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x04,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
		0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E,
		0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x16,

		/* CFG_NAV5: Platform model: 0-Portable */
		0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
		0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E,
		0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8E,

};

#define MAX_PLATFORM_MODEL_SN	3
int gps_platform_model_sn = 0;
bool changeGpsplatformFlag = 0;

void* gpsdata_decode_loop(void * parm) {
	Ublox *M8_Gps_ = (Ublox*)parm;
	i2cgps gps;
	bool ret;

	if(changeGpsplatformFlag) {
		gps.write_gps_config(gps_platform_model_data + (gps_platform_model_sn * SIZE_PER_PLATFORM), SIZE_PER_PLATFORM);
	} else {
		printf("changeGpsplatformFlag error!\n");
	}

	printf("%d\n",gps.write_gps_config(gps_config_change, sizeof(gps_config_change)));

	int totalBytes, bytes;
	while(1) {
		totalBytes = gps.get_byte_available();
		while (totalBytes > 0) {
		    bytes = gps.get_gps_data2buf(totalBytes);
		    if(bytes < 0){
		    	printf("gpsdata_decode_loop: bytes<0!\n");
		    	exit(0);
		    }
		    for (int i = 0; i < bytes; i++) {
		      if((gps.gpsdata_buf())[i]!=0xff)
		        ret = M8_Gps_->encode((char)(gps.gpsdata_buf())[i]);
//		        if (ret == false) {
//		        	printf("gpsdata_decode_loop: encode false!\n");
//		        	exit(-1);
//		        }
		    }
		    totalBytes -= bytes;
		}
		pthread_testcancel();
	}
}

int usage(){
	printf("Parameter Error!\n");
	printf("-P [gps platform model (0~3)] : 0-Stationary, 1-Pedestrian, 2-Automotive, 3-Portabl, \n");
	return -1;
}

int main(int argc, char **argv){
	pthread_t gpstid;
	argc--;
	argv++;

	while(argc > 0) {
		if(argv[0][0]=='-' && argv[0][1]=='P') {
			if (isdigit(argv[0][2])) {
				return usage();
			} else {
				if(argc < 2 || argv[0][2] != '\0') return usage();
				if(gps_platform_model_sn < 0 || gps_platform_model_sn > MAX_PLATFORM_MODEL_SN) {
					printf("Unsupported GPS platform model!\n");
					return usage();
				}
				gps_platform_model_sn = atoi(argv[1]);
				changeGpsplatformFlag = 1;
				argc--;
				argv++;
			}
		}
		argc--;
		argv++;
	}
	if(!changeGpsplatformFlag){
		return usage();
	}
	Ublox *m8_Gps = new Ublox();
	pthread_create(&gpstid, NULL, gpsdata_decode_loop, (void*)m8_Gps);

	while(1){
		system("clear");
		if(m8_Gps->fixtype > 0){
			printf("%f, %f, fix_type: %d\n", m8_Gps->latitude, m8_Gps->longitude, m8_Gps->fixtype);
		} else {
			printf("position invalid!!\n");
		}

		if(m8_Gps->datetime.valid){
			printf("%d-%d-%d, %d:%d:%d\n", m8_Gps->datetime.year, m8_Gps->datetime.month, m8_Gps->datetime.day,
					m8_Gps->datetime.hours, m8_Gps->datetime.minutes, m8_Gps->datetime.seconds);
		} else {
			printf("time invalid!!\n");
		}

		usleep(600 * 1000);
	}
}
